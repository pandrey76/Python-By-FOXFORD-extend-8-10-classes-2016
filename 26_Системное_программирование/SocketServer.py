#!/usr/bin/env python
# -*- coding: UTF-8 -*-

#-------------------------------------------------------------------------------
# Name:        модуль1
# Purpose:
#
# Author:      Prapor
#
# Created:     09.11.2017
# Copyright:   (c) Prapor 2017
# Licence:     <your licence>
#-------------------------------------------------------------------------------


import socket

#Создаём сокет
sock = socket.socket()

#настраиваем сокет, у него есть три настройки
#Две настройки задаются методом bind (Адрес, порт).
#Мы создаём сервер, который будет слушать порт 12345,
#с ip адреса 127.0.0.1.
#127.0.0.1 - это локальный ip (localhost), т.е. мы будем слушать сообщения,
#которые будут приходить с этого же компьютера.
#Если в поле ip адреса передать пустую строку,
#то сервер будет слушать все ip адреса. sock.bind( "", 12345 )
#На компьютере одновременно работают очень много программ, которые так или иначе
#связанны с сетью (почьтовый клиент, месенджер, Scype или браузер) и когда
#приходит сообщение на компьютер, какой то пакет данных, то надо определить
#какие программы должны его принять, в этом смысле говорят, что программа
#слушает определённый порт, например web-server по умолчанию слушает порт с
#номером 80, если это http. Поэтому четырёх значные и пятизначные номера можно
#использовать для своих целей они как правило не заняты, поэтому будем надеятся,
#что порт 12345 слушает только наш сокет. Поэтому когда я посылаю что нибудь из
#клиента я должен буду указать ip адрес компьютера и я должен буду указать ещё
#и порт. Сокет - это способ организации соединения между двумя компьютерами для
#передачи данных между ними. Он не заботится о том, как ходят пакеты, это всё
#делается на более низких уровнях, но он и не думает в каких форматах через него
#будут передавать данные, всякие заголовки, http и т.д., это всё выше, он просто
#умеет передавать нолики и единички.

sock.bind( ( "127.0.0.1", 12345 ) )
#sock.bind( ( "", 12345 ) )

#Необходима ещё одна настройка, поскольку мы пишем сервер - это означает, что он
#в принципе может общаться сразу с многими клиентами, например компьютерная игра,
#в которую играет несколько человек, чтобы не перегружать наш сокет мы вводим
#ограничение.
#Одинадцатый клиент не сможет одновременно подключится к нашему сокету.
sock.listen(10)

print("На следующем методе всё встанет. Ждем подключений")

#Подключаем первого клиента к нашему серверу.
conn, addr = sock.accept()  # conn - Объект, содержащий информацию о подключении.
                            # addr - адрес клиента.
print("Ожидаем данных от первого клиента")
print( conn, addr )

#Получаем данные от клиента  в качестве клиента используем браузер
#-------------------------------------------------------------------------------
#C IE почему то не сработало, а с Chrome сработало.
#-------------------------------------------------------------------------------
data = conn.recv(1024)  #1024 - ограничения на кол-во байт.
#Самым стандартным клиентом для нашего сервера является браузер.
#127.0.0.1:12345 - вбиваем в строке браузера (http://127.0.0.1:12345).
print(data) #Метода запроса (GET, PUT), версия протокола, к кому он обращается, указывает
            #параметры запроса технические, указзывает информацию о себе, говорит,
            #что он готов воспринять в ответ html страницу в виде текстового файла
            #или xml, разрешает сжатие и определяет какие алгоритмы архивирования
            #он поддерживает, говорит что основной язык русский и т.д.

            #b'GET / HTTP/1.1\r\nHost: 127.0.0.1:12345\r\nConnection:
            #keep-alive\r\nAccept: text/html,application/xhtml+xml,application/
            #xml;q=0.9,image/webp,*/*;q=0.8\r\nUser-Agent: Mozilla/5.0 (Windows
            # NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57
            # Safari/537.36\r\nAccept-Encoding: gzip,deflate,sdch\r\nAccept-
            #Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4\r\n\r\n'

print(type(data))   #   <class 'bytes'>
            #Посмотрим более внимательно, что к нам пришло (b'')и мы видим, что этот
            #тип данных называется bytes (байты). Это специальный Питоновский
            #тип данных для хранения набора байтов (масив байт). Отличие от
            #строки в том, что любая строка представлена в какой то кодировке.
            #В Python стандартная кодировка назывется utf-8.
            #Если у нас есть какой-нибудь текст, то для того чтобы его передать
            #надо его сначала закодировать в байты, а потом эти байты передать
            #ну и на оборот если, что то принять надо сначала принять
            #последовательность байт, а после этого эту последовательность байт
            #перекодировать в соответствующие символы указав какую
            #кодировку использовать.

string = data.decode("utf-8")
print(string)   #   GET / HTTP/1.1
                #   Host: 127.0.0.1:12345
                #   Connection: keep-alive
                #   Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
                #   User-Agent: Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36
                #   Accept-Encoding: gzip,deflate,sdch
                #   Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4

conn.send("Buy 1".encode("utf-8"))
#conn.close()
#Web server по умолчанию находится по 80 порту.

conn2, addr2 = sock.accept()
#Подсоединяемся клиентом ( SocketClient.py)
print("Ожидаем данных от второго клиента")
print( conn2, addr2 )   #Получили, что это сокет, который связан с клиентом,
                        #который к нам присоединился, тип сокета, и ещё данные,
                        #а второй параметр содержет масив из двух частей
                        #адрес и из порта, который есть у клиента. Данный порт
                        #генерируется случайно и присваивается клиенту , потому что
                        #совершенно не важно какой порт у клиента, это важно
                        #только серверу на стадии соединения с клиентом, т.е.
                        #сервер будет посылать какието данные на адрес 127.0.0.1
                        #и порт 3865.

                        #<socket.socket fd=1628, family=AddressFamily.AF_INET,
                        #type=SocketType.SOCK_STREAM, proto=0,
                        #laddr=('127.0.0.1', 12345),
                        #raddr=('127.0.0.1', 3865)> ('127.0.0.1', 3865) b''



data2 = conn2.recv(1000)
print( data2 )
string = data2.decode("utf-8")
print(string)

conn2.send("Buy 2".encode("utf-8"))
#conn2.close()
