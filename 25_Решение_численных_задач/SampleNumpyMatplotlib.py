#!/usr/bin/env python
# -*- coding: UTF-8 -*-

#-------------------------------------------------------------------------------
# Name:        модуль1
# Purpose:
#
# Author:      Prapor
#
# Created:     02.11.2017
# Copyright:   (c) Prapor 2017
# Licence:     <your licence>
#-------------------------------------------------------------------------------

#Для чего нужна математика в IT.
#Модулирование
#Статистика
#Графика
#Алгоритмы

#Основная проблема Python.
#Заключается в том, что с С/С++ например хранятся сами элементы масивов и когда мы просим получить например 5
#элемент масива программа смотрит тип элементов масива, определяет размер элемента в байтах и это количество умножает на 5.
#и мы получаем 5 элемент масива.
#В Python всё по другому, в списке хранятся ссылки на элементы списка, которые лежат в памяти, это сделано по тому,
#что в Python заранее не определено какие типы элементов будут хранится в списке и соответственно их размер
#это может быть строка или число с плавающей точкой или целое число.
#При этом эти ссылки не ссылаются на сами элементы, а ссылаются на объекты (например строка представлена в виде объекта в котором
#содержется дополнительная информация в частности длинна этой строки, другими словами данные структуры(объекты)
#необходимо дополнительно обрабатывать, таким образом Python из-за своей специфической работой с памятью всегда будет
#уступать по скорости томуже C/C++.

#Будем работать со следующими стронними библиотеками:
#   1. numpy;   установка (pip install -v "e:\numpy-1.13.3-2-cp34-none-win32.whl")
#       * Только числа;
#       * Фиксированного размера в памяти (целые, действительные, комплексные);
#       * Выполнение вычислений без циклов;
#       * Многомерные масивы;
#       * Фиксированная длина. 
#   2. matplotlib.

#import numpy as np
#import matplotlib.pyplot as plt
    #%matplotlib inline
#import pandas as pd
#import mglearn
#from IPython.display import display
#plt.rc('font', family="Verdana")

#print ("Hello, world")

#Документация http:\\docs.scipy.org/doc/numpy-dev/user/quikestart.html
from numpy import *

#------------------------------------------------------------------------------
#   scipy - более мощная библиотека для математических операций, если нужны 
#            более сложные задачи и необходимо использовать более сложные
#           математические алгоритмы, чем те которые есть в numpy
#------------------------------------------------------------------------------

r = [1, 3, 5, 7]

#Все масивы задаются фиксированной длины
a = array(r)    #[1 3 5 7]

b = zeros(10)   #масив из десяти нулей типа float: [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]

b1 = zeros(10, int)  #масив из десяти нулей типа int: [0 0 0 0 0 0 0 0 0 0]
print( a )
print( b )
print( b1 )

#Функция делит отрезок от 1 до 10 на 10 равных отрезков.
c = linspace(1, 10, 5) #[  1.     3.25   5.5    7.75  10.  ]
print( c )

d  = a[1:3] #пример среза масива
print( a, d )   #   [1 3 5 7] [3 5]

#Срез для масива работает не так как срезы для списков, для списков это копии для масивов нет.
d  = a[1:3] 
a[2] = 9
print( a, d )   #  [1 3 9 7] [3 9]


x = linspace(1, 10, 5)
print(x)    #[  1.     3.25   5.5    7.75  10.  ]

#Берём синус от масива x, для этого нам не понадобятся циклы numpy сама может это сделать
#с помощью организованного внутри библиотеки цикла аналогичного по скорости циклам С/С++.
y = sin(x)
print( y )  #[ 0.84147098 -0.10819513 -0.70554033  0.99459878 -0.54402111]

#Проверим скорости работы стандартной и с помощью библиотеки numpy
#------------------------------------------------------------------------------
import math
def traditional():
    x = list(map(float, range(1000000)))
    y = [0] * len(x)
    for i in range(len(y)):
        y[i] = math.sin(x[i])


def modern():
    x = linspace(0, 99999, 1000000)
    y = sin(x)

from time import *

#Проверка стандартной версии 
start = time()    
traditional()
time1 = time() - start
print( time1 )  #0.43302464485168457

#Проверка аналогичной программы только написанной с использованием numpy
start = time()    
modern()    
time2 = time() - start
print( time2 )  #0.022001266479492188

print ( time1 / time2 ) #20.714389510132257 в 20 раз быстрее реализация numpy

#------------------------------------------------------------------------------

x = array( [1, 2, 3, 4] )  #Из списка делаем масив
y = array( [2, 3, 5, 7] )
print(x + y)    #[ 3  5  8 11] производится поэлементное суммирование.
print(x * y)    #[ 2  6 15 28]
print(x * y**2)    #[  4  18  75 196]


#------------------------------------------------------------------------------
#Визуализируем полученные данные
#Документация http://matplotlib.org/contents.html
#matplotlib обычно пользуются так нам нужны какието графики или диограммы в Python
#мы идём на сайт "http://matplotlib.org" далее идём во вкладку "gallery" 
#находим что нам нужно. Копируем нужный нам код, а далее подгоняем его под наши
#нужды. Как видно всё это получается из минимального надора кода. т.е очень компактно. 
#matplotlib безусловно библиотека для рисования (в ней есть также и widgets, 
#аналогичные tkinter, в том числе возможна различная анимация графиков) при этом она делает за нас всю 
#работу по изображению в нужном формате(схемы водопроводов, электроики, 
#разнообразные графики, в том числе трёхмерные или просто рисунки, обработка различных данных в том
#числе медицинских (данные МРТ и т.д.). 

#Математические формулы в формате "tex", специально придуманный математиками программистами
#для написания формул, как бы интерпритатор для превращения кода в математические тексты.
#Есть плагины для web страниц для отображение формул на html страничке.
#Обязательно разобраться (используются Regex)!!!! (usetex_demo)

#Возможности в разы выше, чем в том же exel.

#Очень большое разнообразие и обязательно необходимо с возможностями 
#данной библиотеки ознакомится!!!!


import matplotlib.pyplot as plt
plt.plot([1, 5, 3, 7])
print(plt)  #<module 'matplotlib.pyplot' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\pyplot.py'>
plt.show()  #нарисовали график

x = linspace(1, 10, 100)
y = sin(x)
plt.plot(x, y)
plt.show()  #как мы видим matplotlib всё знает о numpy и отлично с ним работает


#Рисуем 3D диограмму слегка отредактировав пример из matplotlib.org "Gallery"
#------------------------------------------------------------------------------
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
for z in [30, 20, 10, 0]:
    xs = arange(20)
    ys = random.rand(20)
    ax.bar(xs, ys, zs = z )
plt.show()
#------------------------------------------------------------------------------
