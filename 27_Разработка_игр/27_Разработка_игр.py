#!/usr/bin/env python
# -*- coding: UTF-8 -*-

#-------------------------------------------------------------------------------
# Name:        модуль1
# Purpose:
#
# Author:      Prapor
#
# Created:     14.11.2017
# Copyright:   (c) Prapor 2017
# Licence:     <your licence>
#-------------------------------------------------------------------------------
#В разработке компьютерных игр есть ещё одно понятие - спрайт
#Спрайт - это картинка. которая движется как единое целое, мы можем сказать
#подвинь спрайт дуда или нарисуй спрайт здесь. Спрайтами могут быть герой,
#элементы ланшафта, лабиринта, т.е. любые целостные объекты.
#при этом компьютер решает сразу две проблемы:
#                                       Проблема скорости перересовки;
#                                       Проблема движения объекта как целого.
#Ещё одна проблема, которая возникает в играх это Взаимодействие.
#Взаимодействие - это когда вы не бегаете сквозь стену, не падаете сквозь пол,
#сталкиваетесь с сопернитком, берёте клад, а не пробегаете мимо его, т.е по сути
#происходит взаимодействие одного спрайта с другим спрайтом. Допустим если один
#спрайт коснулся другого спрайта, то произошло событие и мы должны его обработать.
#Это примерно тот уровень который нам даёт Pygame.
#Ещё в каждой игре есть Управление. Управление реализуется очень просто, мы
#осуществляем управление через клавиатуру мышь или голосовые команды, а они в
#свою очередь обрабатываются через обработчики событий, и при этом изменяются
#или координаты Cпрайта или скорость Спрайта.
#Физика - может возникнуть во многих играх, например вы стреляете и снаряд
#начинает лететь по параболе оли отскок от стены мяча и эту физику хорошо бы
#если наш движок сможет отрабатывать (Но PyGame нам в этом не поможет).
#Если мы пишем 3D игру, то у нас возникает задачка как нам 3D объект показать
#на плоском экране. Тоесть построить проэкцию и это называется Рендеринг.
#Вы говорите компютеру что в таком то месте стоит трёх мерный объект а компьютер
#рисует изображение на плоском экране, которое соответствует этому объекту.
#При этом здесь могут быть камеры. У нас могут быть освясение, потомучто один и
#тотже 3D объект выглядет по разному при свете солнца факела или прожектора.
# хороших движках вы можете задать источник света и определить его свойства и
#все отобразится автоматически тени от объектов и от друг ото друга.
#Когда у нас появляется источник света у нас появляются Материалы (Текстуры).
#Свойство текстур очень простое, вы берёте картинку кирпичека и говорите, что
#хотите сделать стену у дома кирпичной движок нам эту картинку размножает и
#растягивает и получается большая кирпичная стена. И если этот дом сложной формы,
#то он как будто приклеивает обои, это называется текстура. Но когда появляется
#свет очень важно, что это за материал, может это зеркало или это шершавая
#кирпичная стена, как этот материал поглащает свет как он его отражает,
#соответственно мы задаём эти параметры и движок вам сам всё расчитает и
#отобразит. Движки в принципе могут сделать достаточно много. Например если мы
#захотим запустить туман, то движок понимает, что туман это много много частичек
#воды, которые специальным образом отражают или преломляют свет и соответственно
#исходя из этого он может сделать сцену в тумане или в дыму или в моросящий дождь.
#или может сделать огонь используя комбинацию многих-многих частиц и оптимизации,
#чтобы эти частицы считались быстро. Дальше идёт Биология нам нужно изображать
#животных, изображать людей, а для этого надо понимать как у них устроены мышцы,
#какие движения они могут делать, как натягивается кожа и т.д. и там анатомические
#модели вполне себе хорошо работают. Но это всё про серьёзные 3D движки а для
#начала надо сделать простой движок, позволяющий писать простые 2D игры, где
#управления и взаимодействия хватвет, а физику придётся писать самим.

#Устанавливаем PyGame.
#pip install pygame
#http://www.pygame.org/docs - документация.

#На http://www.pygame.org есть большая подборка проектов на PyGame, многие из
#них достаточно старые и написаны ещё под Python 2.x поэтому может
#целесообразнее будет установить его и запускать под вторую версию.

def main():
    pass

if __name__ == '__main__':
    main()
